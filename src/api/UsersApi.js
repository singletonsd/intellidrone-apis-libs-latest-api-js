/**
 * Intellidrone API
 * This ios Intellidrone API designed by [Singleton](http://singleton.com.ar).You  can find out more about Swagger at [Singleton Web Page](http://singleton.com.ar) or on [Intellidrone Web Page](http://robotagro.com).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: soporte@singleton.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['/ApiClient', '/models/DeletedResponse', '/models/Error', '/models/Users'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/DeletedResponse'), require('../models/Error'), require('../models/Users'));
  } else {
    // Browser globals (root is window)
    if (!root.intellidrone_api_client_js) {
      root.intellidrone_api_client_js = {};
    }
    root.intellidrone_api_client_js.UsersApi = factory(root.intellidrone_api_client_js.ApiClient, root.intellidrone_api_client_js.DeletedResponse, root.intellidrone_api_client_js.Error, root.intellidrone_api_client_js.Users);
  }
}(this, function(ApiClient, DeletedResponse, Error, Users) {
  'use strict';

  /**
   * Users service.
   * @module /api/UsersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UsersApi.
   * @alias module:/api/UsersApi
   * @class
   * @param {module:/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Add one User.
     * Add one User.
     * @param {module:models/Users} user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Users} and HTTP response
     */
    this.addUserWithHttpInfo = function(user) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Users;

      return this.apiClient.callApi(
        '/Users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Add one User.
     * Add one User.
     * @param {module:models/Users} user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Users}
     */
    this.addUser = function(user) {
      return this.addUserWithHttpInfo(user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Delete one Users.
     * Delete one User.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DeletedResponse} and HTTP response
     */
    this.deleteUsersWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsers");
      }


      var pathParams = {
        id: id,
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = DeletedResponse;

      return this.apiClient.callApi(
        '/Users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Delete one Users.
     * Delete one User.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DeletedResponse}
     */
    this.deleteUsers = function(id) {
      return this.deleteUsersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Edit one User.
     * Edit one User.
     * @param {module:models/Users} user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Users} and HTTP response
     */
    this.editUserWithHttpInfo = function(user) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling editUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Users;

      return this.apiClient.callApi(
        '/Users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Edit one User.
     * Edit one User.
     * @param {module:models/Users} user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Users}
     */
    this.editUser = function(user) {
      return this.editUserWithHttpInfo(user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Get one User.
     * Get one User.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Users} and HTTP response
     */
    this.getUserByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }


      var pathParams = {
        id: id,
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Users;

      return this.apiClient.callApi(
        '/Users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Get one User.
     * Get one User.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Users}
     */
    this.getUserById = function(id) {
      return this.getUserByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Get all Users.
     * Get all Users.
     * @param {Number} skip number of item to skip
     * @param {Number} limit max records to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderBy order by property.
     * @param {String} opts.filter filter data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:models/Users>} and HTTP response
     */
    this.getUsersWithHttpInfo = function(skip, limit, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getUsers");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getUsers");
      }


      var pathParams = {
      };
      var queryParams = {
        skip: skip,
        limit: limit,
        orderBy: opts['orderBy'],
        filter: opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [Users];

      return this.apiClient.callApi(
        '/Users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Get all Users.
     * Get all Users.
     * @param {Number} skip number of item to skip
     * @param {Number} limit max records to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderBy order by property.
     * @param {String} opts.filter filter data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:models/Users>}
     */
    this.getUsers = function(skip, limit, opts) {
      return this.getUsersWithHttpInfo(skip, limit, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Logs user into the system
     * @param {String} user username for login
     * @param {String} password The password for login in clear text
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Error} and HTTP response
     */
    this.loginWithHttpInfo = function(user, password) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling login");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
        user: user,
        password: password,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Error;

      return this.apiClient.callApi(
        '/Users/Login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Logs user into the system
     * @param {String} user username for login
     * @param {String} password The password for login in clear text
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Error}
     */
    this.login = function(user, password) {
      return this.loginWithHttpInfo(user, password)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Logs out current logged in user session
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.logoutWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/Users/Logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Logs out current logged in user session
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.logout = function() {
      return this.logoutWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };
  };

  return exports;
}));
