/**
 * Intellidrone API
 * This ios Intellidrone API designed by [Singleton](http://singleton.com.ar).You  can find out more about Swagger at [Singleton Web Page](http://singleton.com.ar) or on [Intellidrone Web Page](http://robotagro.com).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: soporte@singleton.com.ar
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['/ApiClient', '/models/DeletedResponse', '/models/Error', '/models/Vacas'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/DeletedResponse'), require('../models/Error'), require('../models/Vacas'));
  } else {
    // Browser globals (root is window)
    if (!root.intellidrone_api_client_js) {
      root.intellidrone_api_client_js = {};
    }
    root.intellidrone_api_client_js.VacasApi = factory(root.intellidrone_api_client_js.ApiClient, root.intellidrone_api_client_js.DeletedResponse, root.intellidrone_api_client_js.Error, root.intellidrone_api_client_js.Vacas);
  }
}(this, function(ApiClient, DeletedResponse, Error, Vacas) {
  'use strict';

  /**
   * Vacas service.
   * @module /api/VacasApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VacasApi.
   * @alias module:/api/VacasApi
   * @class
   * @param {module:/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Add one vaca.
     * Add one vaca.
     * @param {module:models/Vacas} vaca
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Vacas} and HTTP response
     */
    this.addVacaWithHttpInfo = function(vaca) {
      var postBody = vaca;

      // verify the required parameter 'vaca' is set
      if (vaca === undefined || vaca === null) {
        throw new Error("Missing the required parameter 'vaca' when calling addVaca");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Vacas;

      return this.apiClient.callApi(
        '/Vacas', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Add one vaca.
     * Add one vaca.
     * @param {module:models/Vacas} vaca
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Vacas}
     */
    this.addVaca = function(vaca) {
      return this.addVacaWithHttpInfo(vaca)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Delete one vaca.
     * Delete one vaca.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DeletedResponse} and HTTP response
     */
    this.deleteVacaWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVaca");
      }


      var pathParams = {
        id: id,
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = DeletedResponse;

      return this.apiClient.callApi(
        '/Vacas/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Delete one vaca.
     * Delete one vaca.
     * @param {String} id id to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DeletedResponse}
     */
    this.deleteVaca = function(id) {
      return this.deleteVacaWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Edit one vaca.
     * Edit one vaca
     * @param {module:models/Vacas} vaca
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Vacas} and HTTP response
     */
    this.editVacaWithHttpInfo = function(vaca) {
      var postBody = vaca;

      // verify the required parameter 'vaca' is set
      if (vaca === undefined || vaca === null) {
        throw new Error("Missing the required parameter 'vaca' when calling editVaca");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Vacas;

      return this.apiClient.callApi(
        '/Vacas', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Edit one vaca.
     * Edit one vaca
     * @param {module:models/Vacas} vaca
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Vacas}
     */
    this.editVaca = function(vaca) {
      return this.editVacaWithHttpInfo(vaca)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Get all vacas.
     * Get all vacas.
     * @param {Number} skip number of item to skip (not included the first)
     * @param {Number} limit max records to return (included the last)
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderBy order by property. Put &#39;-&#39; at the beginning to descendant order.
     * @param {String} opts.filter filter data. NOT SUPPORTED YET.
     * @param {String} opts.userId id of user. Only for admin users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:models/Vacas>} and HTTP response
     */
    this.getVacasWithHttpInfo = function(skip, limit, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getVacas");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getVacas");
      }


      var pathParams = {
      };
      var queryParams = {
        skip: skip,
        limit: limit,
        orderBy: opts['orderBy'],
        filter: opts['filter'],
        userId: opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [Vacas];

      return this.apiClient.callApi(
        '/Vacas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Get all vacas.
     * Get all vacas.
     * @param {Number} skip number of item to skip (not included the first)
     * @param {Number} limit max records to return (included the last)
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderBy order by property. Put &#39;-&#39; at the beginning to descendant order.
     * @param {String} opts.filter filter data. NOT SUPPORTED YET.
     * @param {String} opts.userId id of user. Only for admin users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:models/Vacas>}
     */
    this.getVacas = function(skip, limit, opts) {
      return this.getVacasWithHttpInfo(skip, limit, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };


    /**
     * Get one vaca.
     * Get one vaca.
     * @param {String} id id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId id of user. Only for admin users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Vacas} and HTTP response
     */
    this.getVacasByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVacasById");
      }


      var pathParams = {
        id: id,
      };
      var queryParams = {
        userId: opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['appToken', 'userToken'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Vacas;

      return this.apiClient.callApi(
        '/Vacas/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    };

    /**
     * Get one vaca.
     * Get one vaca.
     * @param {String} id id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId id of user. Only for admin users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Vacas}
     */
    this.getVacasById = function(id, opts) {
      return this.getVacasByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    };
  };

  return exports;
}));
